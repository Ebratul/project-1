#include <iostream>
#include <vector>
#include <queue>
using namespace std;

// Function to find the sum of weights of edges of the Minimum Spanning Tree.
int spanningTree(int V, vector<vector<int>> adj[])
{
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;

    vector<int> vis(V, 0);
    // {wt, node}
    pq.push({0, 0});
    int sum = 0;
    while (!pq.empty())
    {
        auto it = pq.top();
        pq.pop();
        int node = it.second;
        int wt = it.first;

        if (vis[node] == 1)
            continue;
        // add it to the mst
        vis[node] = 1;
        sum += wt;
        for (auto edge : adj[node])
        {
            int adjNode = edge[0];
            int edW = edge[1];
            if (!vis[adjNode])
            {
                pq.push({edW, adjNode});
            }
        }
    }
    return sum;
}

int main()
{
    int V;
    cout << "Enter the number of vertices: ";
    cin >> V;

    int E;
    cout << "Enter the number of edges: ";
    cin >> E;

    vector<vector<int>> edges;
    cout << "Enter edges in the format (source, destination, weight):" << endl;
    for (int i = 0; i < E; ++i)
    {
        int source, destination, weight;
        cin >> source >> destination >> weight;
        edges.push_back({source, destination, weight});
    }

    vector<vector<int>> adj[V];
    for (auto edge : edges)
    {
        vector<int> tmp(2);
        tmp[0] = edge[1];
        tmp[1] = edge[2];
        adj[edge[0]].push_back(tmp);

        tmp[0] = edge[0];
        tmp[1] = edge[2];
        adj[edge[1]].push_back(tmp);
    }

    int sum = spanningTree(V, adj);
    cout << "The sum of all the edge weights: " << sum << endl;

    return 0;
}


/*
Enter the number of vertices: 5
Enter the number of edges: 6
Enter edges in the format (source, destination, weight):
0 1 2
0 3 6
1 3 8
1 2 3
1 4 5
2 4 7
The sum of all the edge weights: 16
*/
